apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.antfortune.freeline'

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm')
    return formattedDate
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    signingConfigs {
        signingConfig {
            keyAlias 'moduleproject'
            keyPassword 'moduleproject'
            storeFile file('../moduleproject.jks')
            storePassword 'moduleproject'
        }
    }

    //默认配置,所有 productFlavors 都会继承 defaultConfig 中配置的属性
    defaultConfig {
        //默认的 applicationId,一般与 AndroidManifest.xml 文件 package属性相同
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode java.lang.Integer.parseInt(APP_VERCODE)
        versionName APP_VERSION
        // gradle.properties中配置项
        resValue("string", 'app_version', APP_VERSION)
        resValue("string", 'app_vercode', APP_VERCODE)
        //
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true // Enabling multidex support.
        signingConfig signingConfigs.signingConfig
    }

    buildTypes {
        release {
            zipAlignEnabled false // Zipalign优化
            minifyEnabled false // 是否混淆
            shrinkResources false // 是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signingConfig
            // mainfest中参数配置
            manifestPlaceholders = [
                    // 基础配置 (APP_HOST和APP_SCHEME放在baselibrary中统一管理)
                    APP_HOST    : "@string/baselib_module_project_host",
                    APP_SCHEME  : "@string/baselib_module_project_scheme",
                    APP_NAME    : "@string/app_name",
                    APP_ICON    : "@mipmap/ic_launcher",
                    // UMENT配置
                    UMENG_APPKEY: "562dd44967e58e4437004451",
                    PACKAGE_NAME: "com.brilliant"
            ]
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "mips64", "x86", "x86_64"
            }
        }

        debug {
            zipAlignEnabled false // Zipalign优化
            minifyEnabled false // 是否混淆
            shrinkResources false // 是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signingConfig
            // mainfest中参数配置
            manifestPlaceholders = [
                    // 基础配置 (APP_HOST和APP_SCHEME放在baselibrary中统一管理)
                    APP_HOST    : "@string/baselib_module_project_host",
                    APP_SCHEME  : "@string/baselib_module_project_scheme",
                    APP_NAME    : "@string/app_name_debug",
                    APP_ICON    : "@mipmap/ic_launcher",
                    // UMENT配置
                    UMENG_APPKEY: "562dd44967e58e4437004451",
                    PACKAGE_NAME: "com.brilliant"
            ]
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "mips64", "x86", "x86_64"
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/resources']
            aidl.srcDirs = ['src/main/aidl']
            renderscript.srcDirs = ['src/maom']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDir 'src/main/jniLibs'
            //2015-08-09在Androidstudio使用高德地图是加入这一句，否则地图出错
            jniLibs.srcDirs = ['libs']
        }
        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    // productFlavors 定义了一个应用的自定义构建版本
    //一个单一的项目可以同时定义多个不同的 flavor 来改变应用的输出。
    // productFlavors 这个概念是为了解决不同的版本之间的差异非常小的情况，通常用于区分同一个应用的不同渠道/客户等，可包含少量业务功能差别。
    // productFlavors 中的 flavor 不能跟 buildType 中的一样,否则会报: "ProductFlavor names cannot collide with BuildType names"
    productFlavors {
        qq {}

        //默认版本,不设置 applicationId ,继承 defaultConfig 中的配置
        flavors_release {}

        //SIT版本, applicationId 替换,APP_NAME和APP_ICON在flavors_sit/res/下配置,直接在这里配置不生效
        flavors_sit {
            applicationId rootProject.ext.android["applicationIdSIT"]
        }

        //UAT版本, applicationId 替换,APP_NAME和APP_ICON在flavors_uat/res/下配置,直接在这里配置不生效
        flavors_uat {
            applicationId rootProject.ext.android["applicationIdUAT"]
        }

        // 设置渠道包名称
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }

    useLibrary 'org.apache.http.legacy'

    // butterKnife和dagger2 注释冲突
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // to resolve-->  Error:Conflict with dependency 'com.google.code.findbugs:jsr305' in project ':app'.
    // Resolved versions for app (3.0.1) and test app (2.0.1) differ. See http://g.co/androidstudio/app-test-app-conflict for details.
    configurations.all {
        //解决 Conflict with dependency 'com.google.code.findbugs:jsr305'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    // 解决 is not translated in "zh" ，防止自动打包失败
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def newName
            def timeNow
            def oldFile = output.outputFile
            def outDirectory = oldFile.parent

            if ("true".equals(IS_JENKINS)) {
                timeNow = JENKINS_TIME
                // 使用相对路径，构建后执行的 Execute Windows batch command 脚本为：
                // curl -F "envType=1" -F "prodType=1001" -F "package=@E:\jenkins\workspace\AndroidFilePicker\app\build\outputs\apk\jenkins\filepicker.apk" https://172.16.88.230:8383/apiv1/app/upload --insecure
                outDirectory = outDirectory + '/jenkins'
                // 动态生成安装包名称
//                newName = 'moduleproduct-v' +
//                        APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
                // 使用固定的名字，方便jenkins打包完成后自动上传到服务器
                newName = 'moduleproduct.apk'
            } else {
                timeNow = getDate()
                if (variant.buildType.name.equals('debug')) {
                    newName = "moduleproduct-v${APP_VERSION}-debug.apk"
                } else {
                    newName = 'moduleproduct-v' +
                            APP_VERSION + '-' + variant.productFlavors[0].name + '-' + timeNow + '-' + variant.buildType.name + '.apk'
                }
            }
            output.outputFile = new File(outDirectory, newName)
        }
    }

}

dependencies {
    //################## 系统级
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile rootProject.ext.dependencies["constraint-layout"]
    testCompile rootProject.ext.dependencies["junit"]
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["recyclerview-v7"]
    compile rootProject.ext.dependencies["cardview-v7"]
    compile rootProject.ext.dependencies["support-v4"]
    compile rootProject.ext.dependencies["design"]

    //################## 引入第三方jar包

    //################## git上第三方库
    //=== Butter Knife
    compile rootProject.ext.dependencies["butterknife"]
    apt rootProject.ext.dependencies["butterknife-compiler"]

    //################## 引用第三方工程
    compile project(':mainlibrary')
}