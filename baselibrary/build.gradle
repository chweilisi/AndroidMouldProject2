apply plugin: 'com.android.library'
apply plugin: 'org.greenrobot.greendao' // apply plugin

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode java.lang.Integer.parseInt(APP_VERCODE)
        versionName APP_VERSION
        // gradle.properties中配置项
        resValue("string", 'app_version', APP_VERSION)
        resValue("string", 'app_vercode', APP_VERCODE)
        resValue("string", 'APP_URL_ENVIRONMENT', APP_URL_ENVIRONMENT)
        resValue("string", 'APP_IS_SHOW_LOG', APP_IS_SHOW_LOG)

        resourcePrefix "baselib_"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // eventBux，下面的包名为自己的工程包名
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'com.example.testlibrary.MyEventBusIndex']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    greendao {
        //指定数据库schema版本号，迁移等操作会用到
        schemaVersion 1
        //通过gradle插件生成的数据库相关文件的包名，默认为你的entity所在的包名
        //  daoPackage 'cn.sunfit.jifeng.capabilities.db.dao'
        //这就是我们上面说到的自定义生成数据库文件的目录了，可以将生成的文件放到我们的java目录中，而不是build中，这样就不用额外的设置资源目录了
        targetGenDir 'src/main/java'
    }
}

dependencies {
    //################## 系统级
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile rootProject.ext.dependencies["constraint-layout"]
    compile rootProject.ext.dependencies["appcompat-v7"]
    testCompile rootProject.ext.dependencies["junit"]

    //################## 引入第三方jar包

    //################## git上第三方库
    //=== AndroidBaseModule
    compile rootProject.ext.dependencies["AndroidBaseModule"]

    //=== AndroidFilePicker
    compile rootProject.ext.dependencies["AndroidFilePicker"]

    //=== okhttp-OkGo
    compile rootProject.ext.dependencies["okgo"]
    compile rootProject.ext.dependencies["okrx"]
    compile rootProject.ext.dependencies["okserver"]

    //=== rxjava
    compile rootProject.ext.dependencies["rxjava"]
    //=== rxandroid
    compile rootProject.ext.dependencies["rxandroid"]
    //=== rxbinding
    compile rootProject.ext.dependencies["rxbinding"]

    //=== ali hotfix
    // 传递性依赖utdid这个sdk, 所以不需要重复依赖utdid.但是另一方面其它阿里系SDK也可能依赖了utdid这个SDK,
    // 如果编译期间报utdid重复, 所以此时进行如下处理即可, 关闭传递性依赖:utdid实际上是为设备生成唯一deviceid的一个基础类库
    compile(rootProject.ext.dependencies["alicloud-android-hotfix"]) {
        exclude(module: 'alicloud-android-utdid')
        transitive = false // 防止和 ali httpdns重复导入
    }

    //=== ali httpdns
    compile rootProject.ext.dependencies["alicloud-android-httpdns"]

    //=== leakcanary
    debugCompile rootProject.ext.dependencies["leakcanary-debugCompile"]
    releaseCompile rootProject.ext.dependencies["leakcanary-releaseCompile"]
    testCompile rootProject.ext.dependencies["leakcanary-testCompile"]

    //=== dagger
    compile rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]

    //=== circleimageview
    compile rootProject.ext.dependencies["circleimageview"]

    //=== greendao
    compile rootProject.ext.dependencies["greendao"]

    //=== banner
    compile rootProject.ext.dependencies["banner"]

    //=== Luban
    compile rootProject.ext.dependencies["Luban"]

    //=== SuperTextView
    compile rootProject.ext.dependencies["SuperTextView"]

    //=== eventbus
    compile rootProject.ext.dependencies["eventbus"]
    annotationProcessor rootProject.ext.dependencies["eventbus-annotation-processor"]

    //################## 引用第三方工程
}
